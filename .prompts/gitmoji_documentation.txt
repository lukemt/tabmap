An emoji guide for your commit messages

🎨 :art:
Improve structure / format of the code.
- Use this when you refine the organization of code, enhance readability, or apply formatting changes that don't alter functionality.

⚡️ :zap:
Improve performance.
- Indicates enhancements that significantly boost the speed or efficiency of the application, optimizing resource usage or execution time.

🔥 :fire:
Remove code or files.
- Use this to denote the removal of code, functionality, or obsolete files from the codebase, ensuring a cleaner project.

🐛 :bug:
Fix a bug.
- Indicates changes specifically aimed at correcting a code issue or malfunction that leads to unexpected behavior.

🚑️ :ambulance:
Critical hotfix.
- Mark urgent fixes that need to be addressed immediately to resolve high-severity bugs in production.

✨ :sparkles:
Introduce new features.
- Use this when adding new functionalities to the application that improve its value or user experience.

📝 :memo:
Add or update documentation.
- Indicates updates or additions to project documentation, helping maintain clarity and understanding of the codebase.

🚀 :rocket:
Deploy stuff.
- Represents code changes that involve deploying the application or releasing updates into production or staging environments.

💄 :lipstick:
Add or update the UI and style files.
- Use this to signify enhancements to user interface (UI) elements or any updates to styling such as CSS changes.

🎉 :tada:
Begin a project.
- Indicates the kickoff of a new project, serving as a celebratory marker for the initial commit.

✅ :white_check_mark:
Add, update, or pass tests.
- Signifies the addition of new tests, updates to existing test cases, or confirmation that tests have passed successfully.

🔒️ :lock:
Fix security or privacy issues.
- Indicates changes made to strengthen the security of the application or address privacy vulnerabilities.

🔐 :closed_lock_with_key:
Add or update secrets.
- Use this to denote the addition or modification of sensitive information, such as API keys or credentials.

🔖 :bookmark:
Release / Version tags.
- Marks specific commits that correlate to a version release, making it easier to track changes for different versions of the software.

🚨 :rotating_light:
Fix compiler / linter warnings.
- Indicates modifications aimed at resolving warnings generated by compilers or linters, improving code quality and standards.

🚧 :construction:
Work in progress.
- Use this when the commit is not complete and the feature or functionality is still being developed.

💚 :green_heart:
Fix CI Build.
- Represents a change that corrects an issue in the Continuous Integration (CI) pipeline, ensuring automated builds run successfully.

⬇️ :arrow_down:
Downgrade dependencies.
- Indicates changes in which certain dependencies are reverted to earlier versions, often due to compatibility or stability issues.

⬆️ :arrow_up:
Upgrade dependencies.
- Marks the upgrade of libraries or packages to newer versions, which may provide performance improvements, security fixes, or new features.

📌 :pushpin:
Pin dependencies to specific versions.
- Indicates that a dependency has been pinned to a specific version to prevent unintentional upgrades that might introduce breaking changes.

👷 :construction_worker:
Add or update CI build system.
- Signals the addition or modification of configurations relevant to the Continuous Integration build process.

📈 :chart_with_upwards_trend:
Add or update analytics or tracking code.
- Indicates enhancements that involve tracking user interactions or collecting analytics data to improve decision-making.

♻️ :recycle:
Refactor code.
- Use this when improving existing code structure without changing its external behavior, focusing on code quality and maintainability.

➕ :heavy_plus_sign:
Add a dependency.
- Signifies the inclusion of new libraries or packages that the project relies on for additional functionality.

➖ :heavy_minus_sign:
Remove a dependency.
- Indicates the removal of libraries or packages from the project, which may reduce bloat or address unused code.

🔧 :wrench:
Add or update configuration files.
- Marks changes made to configuration files that control application behavior or settings.

🔨 :hammer:
Add or update development scripts.
- Indicates the inclusion or modification of scripts used during development, such as build or tooling scripts.

🌐 :globe_with_meridians:
Internationalization and localization.
- Use this when adding or updating features to support multiple languages or regional variations in the application.

✏️ :pencil2:
Fix typos.
- Indicates corrections made to spelling or grammatical errors in the code, comments, or documentation.

💩 :poop:
Write bad code that needs to be improved.
- Used humorously, this signifies that the current code is subpar and is left for later improvement.

⏪️ :rewind:
Revert changes.
- Indicates that previous changes are being undone, restoring the codebase to a prior state.

🔀 :twisted_rightwards_arrows:
Merge branches.
- Use this to signify the act of merging code from one branch into another, often bringing together different lines of development.

📦️ :package:
Add or update compiled files or packages.
- Indicates changes related to the addition or modification of binaries, compiled files, or application packages that are part of the deployment process.

👽️ :alien:
Update code due to external API changes.
- Signifies modifications made as a response to changes in an external API that the application relies on, ensuring compatibility.

🚚 :truck:
Move or rename resources (e.g.: files, paths, routes).
- Indicates that files, resources, or paths within the codebase have been relocated or renamed, without altering their content.

📄 :page_facing_up:
Add or update license.
- Mark changes that involve the addition or updating of project licensing information, ensuring compliance and clarity regarding usage rights.

💥 :boom:
Introduce breaking changes.
- Indicates code modifications that may lead to breaking changes for users, requiring them to adjust their use of the software.

🍱 :bento:
Add or update assets.
- Signifies the addition or enhancement of non-code assets, like images, icons, or other media used within the application.

♿️ :wheelchair:
Improve accessibility.
- Use this when implementing changes that make the application more accessible to users with disabilities, improving usability across a wider audience.

💡 :bulb:
Add or update comments in source code.
- Indicates that comments have been added or improved, enhancing the documentation within the code itself for better understanding.

🍻 :beers:
Write code drunkenly.
- A humorous token that suggests the code may have been written in a less-than-optimal state of mind; typically not used in serious contexts.

💬 :speech_balloon:
Add or update text and literals.
- Used to signify changes that involve the addition or modification of text strings, labels, or literals in the application.

🗃️ :card_file_box:
Perform database related changes.
- Indicates modifications related to database schema, migrations, or data management that affect how the data is structured or accessed.

🔊 :loud_sound:
Add or update logs.
- Signifies the inclusion or enhancement of logging features within the application, which aid in monitoring and debugging.

🔇 :mute:
Remove logs.
- Indicates that logging statements or entire logging functionalities have been removed from the codebase.

👥 :busts_in_silhouette:
Add or update contributor(s).
- Marks changes that acknowledge new contributors to the project, highlighting collaboration and community involvement.

🚸 :children_crossing:
Improve user experience / usability.
- Signifies efforts made to enhance the overall usability of the application, focusing on user satisfaction and ease of use.

🏗️ :building_construction:
Make architectural changes.
- Use this when structural changes are made to the codebase architecture, laying the foundation for future development.

📱 :iphone:
Work on responsive design.
- Indicates changes made to ensure that the application functions optimally across various devices and screen sizes.

🤡 :clown_face:
Mock things.
- Signifies the addition of mock implementations for testing purposes, facilitating easier unit or integration testing.

🥚 :egg:
Add or update an easter egg.
- Indicates the introduction or alteration of hidden features or fun surprises within the application for users to discover.

🙈 :see_no_evil:
Add or update a .gitignore file.
- Marks changes that improve the `.gitignore` file to prevent unnecessary files from being tracked in version control.

📸 :camera_flash:
Add or update snapshots.
- Signifies the addition or modification of visual snapshots or screenshots, often for testing or demonstration purposes.

⚗️ :alembic:
Perform experiments.
- Indicates work performed that is experimental in nature, such as proof of concepts or trial implementations.

🔍️ :mag:
Improve SEO.
- Signifies changes made to enhance search engine optimization (SEO) aspects of the application, improving its visibility.

🏷️ :label:
Add or update types.
- Indicates enhancements related to type definitions or type annotations, improving type safety in the application.

🌱 :seedling:
Add or update seed files.
- Used to signify the addition or modification of seed scripts used to populate databases with initial data.

🚩 :triangular_flag_on_post:
Add, update, or remove feature flags.
- Indicates changes relevant to toggling features on or off, allowing for controlled deployment of functionalities.

🥅 :goal_net:
Catch errors.
- Indicates the implementation of error handling mechanisms or catch blocks to improve error management.

💫 :dizzy:
Add or update animations and transitions.
- Signifies enhancements made to visual effects such as animations, transitions, or dynamic components within the UI.

🗑️ :wastebasket:
Deprecate code that needs to be cleaned up.
- Use this to indicate that certain parts of the codebase are marked for future removal, signaling that they are no longer recommended for use.

🛂 :passport_control:
Work on code related to authorization, roles, and permissions.
- Signifies changes that involve enhancing or restructuring code that manages user access and permissions within the application.

🩹 :adhesive_bandage:
Simple fix for a non-critical issue.
- Indicates minor fixes that resolve less severe issues which do not significantly disrupt project functionality.

🧐 :monocle_face:
Data exploration/inspection.
- Used when performing exploratory data analysis or inspecting datasets to gain insights before making more extensive changes.

⚰️ :coffin:
Remove dead code.
- Signifies the removal of code that is no longer used or has been rendered obsolete, contributing to a cleaner and more maintainable codebase.

🧪 :test_tube:
Add a failing test.
- Indicates the addition of test cases that are intentionally failing, often used to highlight issues that need to be resolved or to verify future code changes.

👔 :necktie:
Add or update business logic.
- Signifies changes made to the core logic of the application that govern its functionality and handle data processing rules.

🩺 :stethoscope:
Add or update health check.
- Indicates the implementation or enhancement of health check mechanisms to monitor the application's status and performance.

🧱 :bricks:
Infrastructure related changes.
- Use this to signify modifications made to the underlying infrastructure of the application, supporting systems, or deployment environments.

🧑‍💻 :technologist:
Improve developer experience.
- Indicates changes made to enhance workflows, tooling, or practices that benefit developers' productivity and ease of development.

💸 :money_with_wings:
Add sponsorships or money-related infrastructure.
- Signifies the introduction of features related to monetization, financial transactions, or sponsorship-management within the application.

🧵 :thread:
Add or update code related to multithreading or concurrency.
- Represents changes made to introduce or improve handling of concurrent processes, enhancing performance or responsiveness in the application.

🦺 :safety_vest:
Add or update code related to validation.
- Indicates enhancements made to code that enforces data integrity and validation rules, ensuring that inputs meet specified criteria.
